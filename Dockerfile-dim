from ubuntu:jammy

ENV DEBIAN_FRONTEND noninteractive

RUN apt update -y && apt install -y make gcc g++ cmake git build-essential autoconf libtool make libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev pkg-config \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl libjson-c5 libjson-c-dev uuid numactl libnuma-dev \
libudev-dev libnl-3-dev libnl-route-3-dev ninja-build valgrind python3-dev cython3 python3-docutils pandoc

# ENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig

# install rdma-core
RUN git clone https://github.com/linux-rdma/rdma-core \
&& cd rdma-core \
&& git checkout v41.0 \
&& bash build.sh

# # install opa-psm2 - only works with x86_64
# RUN git clone https://github.com/cornelisnetworks/opa-psm2 \
# && cd opa-psm2 \
# && git checkout PSM2_11.2.230 \
# && make \
# && make install

# install ucx
RUN git clone https://github.com/openucx/ucx.git ucx \
&& cd ucx \
&& ./autogen.sh \
&& mkdir build \
&& cd build \
&& ../configure \
&& make -j4 \
&& make install

# install libfabric
RUN git clone https://github.com/ofiwg/libfabric.git \
&& cd libfabric \
&& git checkout v1.16.1 \
&& mkdir build \
&& ./autogen.sh \
&& cd build \
&& ../configure --enable-tcp --enable-rxm --disable-sockets \
&& make \
&& make install

# install bmi
RUN git clone https://github.com/radix-io/bmi.git \
&& cd bmi \
&& git checkout v2.8.1 \
&& mkdir build \
&& ./prepare \
&& cd build \
&& ../configure \
&& make \
&& make install

# install openpa
RUN git clone https://github.com/pmodels/openpa.git \
&& cd openpa \
&& git checkout v1.0.4 \
&& ./autogen.sh \
&& mkdir build \
&& cd build \
&& ../configure \
&& make \
&& make install

# install mercury
RUN git clone --recurse-submodules https://github.com/mercury-hpc/mercury.git && cd mercury \
&& git checkout v2.2.0 \
&& mkdir build && cd build && \
cmake -DMERCURY_USE_SELF_FORWARD:BOOL=ON \
 -DBUILD_TESTING:BOOL=ON -DMERCURY_USE_BOOST_PP:BOOL=ON \
 -DNA_USE_OFI=ON \
 -DBUILD_SHARED_LIBS:BOOL=ON \
 -DCMAKE_BUILD_TYPE:STRING=Debug ../ \
 && make \
 && make install

# install argobots
RUN git clone https://github.com/pmodels/argobots.git && cd argobots && ./autogen.sh && ./configure && make && make install 

# install mochi-margo
RUN git clone https://github.com/mochi-hpc/mochi-margo.git \
&& cd mochi-margo \
&& autoupdate \
&& ./prepare.sh \
&& mkdir build \
&& cd build \
&& ../configure --prefix /usr/local PKG_CONFIG_PATH=/usr/local/pkgconfig CFLAGS="-g -Wall" \
&& sed -i -r 's/(LDFLAGS.*)-R/\1 /' Makefile \
&& make \
&& make install

ENV PYENV_ROOT="/pyenv"
# install pyenv
RUN curl https://pyenv.run | bash

ENV PATH="$PYENV_ROOT/bin:$PATH"
RUN echo 'eval "$(pyenv init -)"'
RUN pyenv install 3.7.15 && pyenv install 3.8.15 && pyenv install 3.9.15 && pyenv install 3.10.8 \
&& echo 'eval "$(pyenv init -)"' >> $HOME/.bashrc && echo "pyenv shell 3.9.15" >> $HOME/.bashrc

# install py-mochi-margo on all python versions
RUN pkg-config --validate margo && eval "$(pyenv init -)" && pyenv shell 3.7.15 \
&& python -m pip install --upgrade setuptools pip tox virtualenv \
&& pyenv shell 3.8.15 \
&& python -m pip install --upgrade setuptools pip tox virtualenv \
&& pyenv shell 3.9.15 \ 
&& python -m pip install --upgrade setuptools pip tox virtualenv \
&& pyenv shell 3.10.8 \
&& python -m pip install --upgrade setuptools pip tox virtualenv

ENV LD_LIBRARY_PATH="/usr/local/lib"
