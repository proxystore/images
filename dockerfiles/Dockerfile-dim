from ubuntu:jammy

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -y \
&& apt-get install -y --no-install-recommends \
  make gcc g++ cmake git build-essential ca-certificates autoconf automake libtool \
  libjson-c-dev libssl-dev zlib1g-dev \
  libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev pkg-config \
  libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl libjson-c5 \
  libjson-c-dev uuid numactl libnuma-dev \
  libudev-dev libnl-3-dev libnl-route-3-dev ninja-build valgrind python3-dev cython3 \
  python3-docutils pandoc \
&& apt-get clean autoclean \
&& rm -rf /var/lib/apt/lists/*

# install rdma-core
RUN git clone -b v41.0 --depth 1 https://github.com/linux-rdma/rdma-core \
&& cd rdma-core \
&& bash build.sh

# install ucx
RUN git clone -b v1.13.1 --depth 1 https://github.com/openucx/ucx \
&& cd ucx \
&& ./autogen.sh \
&& mkdir build \
&& cd build \
&& ../configure \
&& make -j4 \
&& make install

# install libfabric
RUN git clone -b v1.16.1 --depth 1 https://github.com/ofiwg/libfabric \
&& cd libfabric \
&& mkdir build \
&& ./autogen.sh \
&& cd build \
&& ../configure --enable-tcp --enable-rxm --disable-sockets \
&& make \
&& make install

# install bmi
RUN git clone -b v2.8.1 --depth 1 https://github.com/radix-io/bmi \
&& cd bmi \
&& git checkout v2.8.1 \
&& mkdir build \
&& ./prepare \
&& cd build \
&& ../configure \
&& make \
&& make install

# install openpa
RUN git clone -b v1.0.4 --depth 1 https://github.com/pmodels/openpa \
&& cd openpa \
&& ./autogen.sh \
&& mkdir build \
&& cd build \
&& ../configure \
&& make \
&& make install

# install mercury
RUN git clone -b v2.2.0 --depth 1 --recurse-submodules --shallow-submodules https://github.com/mercury-hpc/mercury \
&& cd mercury \
&& mkdir build \
&& cd build \
&& cmake -DMERCURY_USE_SELF_FORWARD:BOOL=ON \
 -DBUILD_TESTING:BOOL=ON -DMERCURY_USE_BOOST_PP:BOOL=ON \
 -DNA_USE_OFI=ON \
 -DBUILD_SHARED_LIBS:BOOL=ON \
 -DCMAKE_BUILD_TYPE:STRING=Debug ../ \
&& make \
&& make install

# install argobots
RUN git clone --depth 1 https://github.com/pmodels/argobots \
&& cd argobots \
&& ./autogen.sh \
&& ./configure \
&& make \
&& make install

# install mochi-margo
RUN git clone -b v0.11.1 --depth 1 https://github.com/mochi-hpc/mochi-margo \
&& cd mochi-margo \
&& autoupdate \
&& ./prepare.sh \
&& mkdir build \
&& cd build \
&& ../configure --prefix /usr/local PKG_CONFIG_PATH=/usr/local/pkgconfig CFLAGS="-g -Wall" \
&& sed -i -r 's/(LDFLAGS.*)-R/\1 /' Makefile \
&& make \
&& make install

# install python versions
RUN apt-get update -y \
&& apt-get install -y --no-install-recommends gpg-agent software-properties-common \
&& add-apt-repository ppa:deadsnakes/ppa \
&& apt-get update -y \
&& apt-get install -y --no-install-recommends \
  python3-pip \
  python3.7 python3.7-dev python3.7-venv \
  python3.8 python3.8-dev python3.8-venv \
  python3.9 python3.9-dev python3.9-venv \
  python3.10 python3.10-dev python3.10-venv \
  python3.11 python3.11-dev python3.11-venv \
&& apt-get clean autoclean \
&& rm -rf /var/lib/apt/lists/*

# add tox install to path via virtualenv
RUN mkdir -p /home/root/opt/bin \
&& python3.9 -m venv /home/root/opt/venv \
&& . /home/root/opt/venv/bin/activate \
&& pip install --upgrade setuptools tox virtualenv \
&& cd /home/root/opt/bin \
&& ln -s /home/root/opt/venv/bin/tox tox \
&& ln -s /home/root/opt/venv/bin/virtualenv virtualenv
ENV PATH="/home/root/opt/bin:$PATH"

# install proxystore to pre-cache some packages
RUN python3.7 -m venv /home/root/opt/venv3.7 \
&& python3.8 -m venv /home/root/opt/venv3.8 \
&& python3.9 -m venv /home/root/opt/venv3.9 \
&& python3.10 -m venv /home/root/opt/venv3.10 \
&& python3.11 -m venv /home/root/opt/venv3.11 \
&& /home/root/opt/venv3.7/bin/pip install proxystore[dev,endpoints] \
&& /home/root/opt/venv3.8/bin/pip install proxystore[dev,endpoints] \
&& /home/root/opt/venv3.9/bin/pip install proxystore[dev,endpoints] \
&& /home/root/opt/venv3.10/bin/pip install proxystore[dev,endpoints] \
&& /home/root/opt/venv3.11/bin/pip install proxystore[dev,endpoints] \
&& rm -rf /home/root/opt/venv3.7 \
&& rm -rf /home/root/opt/venv3.9 \
&& rm -rf /home/root/opt/venv3.9 \
&& rm -rf /home/root/opt/venv3.10 \
&& rm -rf /home/root/opt/venv3.11

ENV LD_LIBRARY_PATH="/usr/local/lib"
